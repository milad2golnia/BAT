#ifndef __VULNERABILITYDETECTION__INCLUDED__
#define __VULNERABILITYDETECTION__INCLUDED__


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>


/*
*   Checks for sequence function vulnerability and report them to STDOUT if any found.
*   @param  dotFile -   The Graph Call in dot format.
*   @param  vulFile -   The list of sequence functions which describes vulnerabilities.
*   NOTE: The vulFile should be in a specific format:
*       1. Each sequence of function vulnerabilities should be just expressed in just one line.
*       2. You should just write function names barely, without any paranthes or other formatting.
*       3. In each line, the function names should be seperated by one space.
*       4. Length of each function name should be at most 1000 character, the rest of line
*            will be ignored or will be considered as next function!
*       5. In start of each line, you should determine the number of functions in squence.
*       6. In start of file, you should determine number of sequences in file.
*/
void sequenceFunctionCheck(FILE* dotFile, FILE* vulFile);

/*
*   Checks for sequence syscall vulnerabilities nad report them to STDOUT if any found.
*   @param  dotFile -   The Graph Call in dot format.
*   @param  vulFile -   The list of sequence syscalls which describes vulnerabilities.
*   NOTE: The vulFile should be in a specific format:
*       1. Each sequence of syscall vulnerabilities should be just expressed in just one line.
*       2. You should just write syscall numbers barely, without any 'syscall' string
*           or other formatting.
*       3. In each line, the syscall numbers should be seperated by one space.
*       4. In start of each line, you should determine the number of syscalls in that squence.
*       5. In start of file, you should determine the number of sequences in file.
*/
void sequenceSyscallCheck(FILE* dotFile, FILE* vulFile);


#endif